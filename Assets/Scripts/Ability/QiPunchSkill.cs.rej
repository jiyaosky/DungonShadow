diff a/Assets/Scripts/Ability/QiPunchSkill.cs b/Assets/Scripts/Ability/QiPunchSkill.cs	(rejected hunks)
@@ -18,39 +18,28 @@
         // 可以添加特定于 Skill 的属性和方法
         public override IEnumerator Act(CellGrid cellGrid, bool isNetworkInvoked = false)
         {
-            var enemies = cellGrid.GetAIEnemies();
-            var unitsInRange = enemies.Where(u => u.Cell.GetDistance(UnitReference.Cell) <= Range);
-            foreach (var enemy in unitsInRange)
+            var realPlayer = UnitReference as RealPlayer;
+            realPlayer.AttackHandler(UnitToAttack, APCost, false);
+            // 获取气功拳推到的目标点
+            Cell pushTarget = UnitToAttack.Cell;
+            IList<Cell> path = new List<Cell>();
+            path.Add(pushTarget);
+            Vector2 unitDirection = new Vector3(realPlayer.currentForward.x, realPlayer.currentForward.z);
+            for (int i = 1; i <= pushRange; i++)
             {
-                UnitReference.ChangeFoward(UnitReference.transform.position,enemy.transform.position);
-                UnitReference.AttackHandler(enemy, APCost, false);
-                
-                // 获取气功拳推到的目标点
-                Cell pushTarget = enemy.Cell;
-                IList<Cell> path = new List<Cell>();
-                path.Add(pushTarget);
-                Vector2 unitDirection = new Vector3(UnitReference.currentForward.x, UnitReference.currentForward.z);
-                for (int i = 1; i <= pushRange; i++)
+                Vector2 targetPosition = realPlayer.Cell.OffsetCoord + unitDirection * i;
+                Cell targetCell = cellGrid.GetCell(targetPosition);
+                if (!targetCell.IsTaken)
                 {
-                    
-                    Vector2 targetPosition = UnitReference.Cell.OffsetCoord + unitDirection * i;
-                    Cell targetCell = cellGrid.GetCell(targetPosition);
-                    pushTarget = targetCell;
-                    if (pushTarget == null)
-                    {
-                        
-                    }
-                    if (targetCell.IsTaken && !targetCell.Equals(pushTarget))
-                    {
-                        break;
-                    }
+                    path.Add(targetCell);
                 }
-                
-                
-                yield return enemy.Move(pushTarget, path);
+
+                pushTarget = targetCell;
             }
 
-            yield return null;
+            path.Reverse();
+            yield return UnitToAttack.Move(pushTarget, path);
+                
         }
         
         public override bool CanPerform(CellGrid cellGrid)
